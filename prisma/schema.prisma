// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // 適切なDBプロバイダーに変更してください
  url      = env("DATABASE_URL")
}

model Lecture {
  id           Int      @id @default(autoincrement())
  ClassCode    Int
  Name         String
  Credits      Int
  Category     String
  field        String
  Syllabus     String?  // 任意
  TimeInfo     TimeInfo @relation(fields: [TimeInfo_id], references: [id])
  TimeInfo_id  Int
  Classroom    Classroom @relation(fields: [Classroom_id], references: [id])
  Classroom_id Int
  Teachers     Lecture_Teacher[]
  Feedbacks    Lecture_Feedback[]
}

model Lab {
  id            Int     @id @default(autoincrement())
  Name          String
  Place         String? // 任意
  Campus        Campus
  Department    Department @relation(fields: [Department_id], references: [id])
  Department_id Int
  Teachers       Teacher_Lab[]
}

model Teacher_Lab {
  id       Int @id @default(autoincrement())
  Teacher  Teacher @relation(fields: [Teacher_id], references: [id])
  Teacher_id Int
  Lab      Lab @relation(fields: [Lab_id], references: [id])
  Lab_id   Int
}

model Teacher {
  id      Int @id @default(autoincrement())
  Name    String
  Position String?
  Lectures Lecture_Teacher[]
  Labs      Teacher_Lab[]
}

model Feedback {
  id            Int @id @default(autoincrement())
  Comment       String?
  Attendance    Int
  Ease          Int
  Satisfaction  Int
  Lectures      Lecture_Feedback[]
}

model ClassMatching {
  id Int @id @default(autoincrement())
}

model Classroom {
  id          Int @id @default(autoincrement())
  name        String
  Building    Building @relation(fields: [Building_id], references: [id])
  Building_id Int
  Lectures    Lecture[]
}

model TimeInfo {
  id           Int @id @default(autoincrement())
  SchoolYear   Int
  Semester     Boolean
  Weekday      Weekday
  Period       Int
  Academic     Academic @relation(fields: [Academic_id], references: [id])
  Academic_id  Int
  Lectures     Lecture[]
}

model Academic {
  id         Int @id @default(autoincrement())
  Academics  AcademicEnum
  Departments Department[]
  TimeInfos  TimeInfo[]
}

model Department {
  id          Int @id @default(autoincrement())
  Academic    Academic @relation(fields: [Academic_id], references: [id])
  Academic_id Int
  Labs        Lab[]
}

model Notification {
  id Int @id @default(autoincrement())
}

model Lecture_Teacher {
  id         Int @id @default(autoincrement())
  Lecture    Lecture @relation(fields: [Lecture_id], references: [id])
  Lecture_id Int
  Teacher    Teacher @relation(fields: [Teacher_id], references: [id])
  Teacher_id Int
}

model Lecture_Feedback {
  id          Int @id @default(autoincrement())
  Feedback    Feedback @relation(fields: [Feedback_id], references: [id])
  Feedback_id Int
  Lecture     Lecture @relation(fields: [Lecture_id], references: [id])
  Lecture_id  Int
}

model Building {
  id      Int @id @default(autoincrement())
  Name    String
  Classrooms Classroom[]
}

enum Campus {
  KIC
  BKC
  OIC
}

enum Weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum AcademicEnum {
  Law
  SocialSciences
  InternationalRelations
  Letters
  Economics
  SportandHealthScience
  ScienceandEngineering
  LifeSciences
  PharmaceuticalSciences
  GastronomyManagement
  BusinessAdministration
  PolicyScience
  ComprehensivePsychology
  GlobalLiberalArts
  ImageArtsandSciences
  InformationScienceandEngineering
}

