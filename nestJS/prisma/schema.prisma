// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // 使用しているDBの種類に応じて変更
  url      = env("DATABASE_URL")
}

enum Campus {
  KIC  
  BKC  
  OIC  
}

enum Weekday {
  Monday   
  Tuesday   
  Wednesday  
  Thursday  
  Friday    
  Saturday  
  Sunday    
}

enum Academics {
  All               // すべて
  LiberalArts       // 教養科目
  Law               // 法学部
  SocialSciences    // 産業社会学部
  InternationalRelations // 国際関係学部
  Literature        // 文学部
  Business          // 経営学部
  PolicyScience     // 政策科学部
  Psychology        // 総合心理学部
  GlobalLiberalArts // グローバル教養学部
  Film              // 映像学部
  InformationScience // 情報理工学部
  ScienceAndTechnology // 理工学部
  Economics         // 経済学部
  SportsHealthScience // スポーツ健康科学部
  FoodManagement    // 食マネージメント学部
  LifeSciences      // 生命科学部
  Pharmacy          // 薬学部
  }

enum Condition {
  BRAND_NEW //新品、未使用
  LIKE_NEW  //未使用に近い
  GOOD  //目立った傷や汚れなし
  FAIR //やや傷や汚れあり
  POOR  //傷や汚れあり
  BAD //全体的に状態が悪い
}

enum Semester {
  Spring
  Autumn
}

model Lecture {
  id              Int        @id @default(autoincrement())
  classCode       Int        @map("class_code")
  name            String
  credits         Int        @default(0) // 単位数
  category        String?    // 科目区分　（例；教養、 基礎専門、専門）
  field           String?
  syllabus        String?
  teacher         String
  academic        Academics
  schoolYear      Int        @map("school_year")
  semester        Semester   // 学期　（0：春、1：秋）
  weekday         Weekday
  period          Int
  feedbacks       Feedback[]
  campus          Campus?
  rawClassroom    String?   @map("raw_classrom") // 念のため教室も入れておく
  lectureClassrooms LectureClassroom[] // リレーション: Lecture -> lectureClassroom

  @@unique([academic, schoolYear, semester, classCode, weekday, period])
  @@index([academic, schoolYear, semester, classCode, weekday, period])
  @@index([schoolYear, semester, weekday, period, academic])
  @@index([schoolYear,semester,weekday,period,campus])
  @@index ([name, teacher])  // 複合キー
}

// 先生一人に対して複数の研究室が結びつくパターンでも、ここでは先生一人に対して一つの研究室として扱うから、同じ研究室が入る可能性がある
model Lab {
  id           Int        @id @default(autoincrement()) // ID
  name         String        // 研究室名
  place        String?       // 研究所の場所（null許容）
  campus       Campus        // キャンパス
  academic    Academics      // 学部
  department   Int           // 学科
  teacher      String        // 教授名
  labFeedbacks LabFeedback[] // リレーション: Lab -> LabFeedback

  @@index([academic,department])
}

model Feedback {
  id           Int       @id @default(autoincrement()) // ID
  comment      String?   // コメント（null許容）
  attendance   Int       // 出席確認率
  ease         Int       // 楽単度
  satisfaction Int       // 充実度
  lecture      Lecture   @relation(fields: [lectureId], references: [id]) // リレーション: Feedback -> Lecture
  lectureId    Int       @map("lecture_id")// リレーションで参照する講義ID

}

model ClassMatching {
  id Int                 @id @default(autoincrement()) // ID
}

model Notification {
  id           Int       @id @default(autoincrement()) // ID
  message      String // 内容
  imageUrl     String    @map("image_url")
  sourceUrl    String    @map("source_url")
  stackScreen  String?   @map("stack_screen")
}

model LabFeedback {
  id           Int       @id @default(autoincrement()) // ID
  comment      String? // コメント（null許容）
  attendance   Int     // 出席確認率
  ease         Int     // 楽単度
  satisfaction Int     // 充実度
  lab          Lab       @relation(fields: [labId], references: [id]) // リレーション: LabFeedback -> Lab
  labId        Int       @map("lab_id")// リレーションで参照する研究室ID

  @@map("lab_feedback") 
}

model Building {
  id           Int       @id @default(autoincrement()) // ID
	campus       Campus // enumのやつ
	name         String     @unique() // 建物名
  
  classrooms   Classroom[] // リレーション: Building -> ClassRoom
}

model LectureClassroom {
  id           Int       @id @default(autoincrement()) // ID
  lectureId    Int       @map("lecture_id")// リレーションで参照する講義ID
  classroomId  Int       @map("classroom_id")// リレーションで参照する教室ID

  lecture      Lecture?   @relation(fields: [lectureId], references: [id]) // リレーション: Lecture -> lectureClassroom
  classroom    Classroom? @relation(fields: [classroomId], references: [id]) // リレーション: Classroom -> lectureClassroom

  @@unique([lectureId, classroomId])
  @@index([lectureId, classroomId])
}

model Classroom {
  id           Int       @id @default(autoincrement()) // ID
  buildingId   Int       @map("building_id")// リレーションで参照する建物ID
  name         String    // 教室名

  building     Building @relation(fields: [buildingId], references: [id]) // リレーション: Classroom -> Building
  lectureClassrooms LectureClassroom[] // リレーション: Classroom -> lectureClassroom

  @@unique([buildingId, name])
  @@index([buildingId, name])
}

model ListingItem{
  id               Int        @id @default(autoincrement()) // ID
  documentId       String     @unique @map("document_id") //FirebaseにおけるID
  purchasedAt      DateTime?  @map("purchased_at") //購入した日時
  purchasedUserId  String?    @map("purchased_user_id") //購入したユーザーのid
  condition        Condition   //商品の状態
  createdAt        DateTime   @default(now()) @map("created_at") //出品された日時
  department       Academics   //学部
  description      String?     //商品の説明
  price            Int         //商品の価格
  name             String      //商品名
  firebaseUserId   String     @map("firebase_user_id") //ユーザーID

  imageUrls         ImageUrl[] 
  
  @@map("listing_item")
}

model ImageUrl {
  id  Int           @id @default(autoincrement())
  url String
  listingItemId Int @map("listing_item_id")

  listingItem ListingItem  @relation(fields: [listingItemId], references: [id]) 
  
  @@map("image_url")
}

model DeviceToken {
  id Int              @id @default(autoincrement())
  deviceToken String  @unique @map("device_token")
  firebaseUserId String? @map("firebase_user_id")
}

model Schedule {
  id String @id @default(cuid())
  scheduleId String @unique @map("schedule_id")
  minute Int?
  hour Int?
  weekday Weekday?
  message String @map("message")
  description String? @map("description")
  category String @map("category")
  formId String? @map("form_id")
  resultScheduleId String? @map("result_schedule_id")
}

model CircleMember {
  id Int @id @default(autoincrement())
  role String
  name String
  lineUserId String? @map("line_user_id")
  studentNumber String? @map("student_number")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("circle_member")
}